swagger: "2.0"
info:
  title: "Flask Articles API"
  description: "API for managing an articles"
  version: "0.1.0"
securityDefinitions:
  JWT:
    type: apiKey
    name: Authorization
    in: header
host: "0.0.0.0:5000"
basePath: "/"
schemes:
  - "http"

paths:
  /api/v1/articles:
    get:
      tags:
        - Articles
      summary: Get a list of all articles
      description: Retrieve all articles from the database.
      security:
        - JWT: []
      responses:
        200:
          description: List of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "An article"
                    content:
                      type: string
                      example: "Some content"
                    user_id:
                      type: integer
                      example: 1

    post:
      tags:
        - Articles
      summary: Create a new article
      description: Add a new article to the database.
      security:
        - JWT: []
      parameters:
        - in: body
          name: article
          description: Article to create.
          schema:
            type: object
            required:
              - title
              - content
            properties:
              title:
                type: string
              content:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "An article"
                content:
                  type: string
                  example: "Some content"
      responses:
        201:
          description: Article created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "An article"
                  content:
                    type: string
                    example: "Some content"
                  user_id:
                    type: integer
                    example: 1
        400:
          description: Invalid input

  /api/v1/articles/search?q={data}:
    get:
      tags:
        - Articles
      summary: Find articles by title or content
      description: Retrieve list of an articles
      security:
        - JWT: []
      parameters:
        - in: path
          name: data
          required: true
          schema:
            type: string
          description: Text to find by
      responses:
        200:
          description: List of articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "An article"
                  content:
                    type: string
                    example: "Some content"
                  user_id:
                    type: integer
                    example: 1

  /api/v1/articles/{id}:
    get:
      tags:
        - Articles
      summary: Get details of a specific article
      description: Retrieve details of an article by its ID.
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the article to retrieve
      responses:
        200:
          description: Article details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "An article"
                  content:
                    type: string
                    example: "Some content"
                  user_id:
                    type: integer
                    example: 1
        404:
          description: Article not found

    put:
      tags:
        - Articles
      summary: Update an article
      description: Update details of an article by its ID.
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the article to update
        - in: body
          name: article
          description: Article to update.
          schema:
            type: object
            required:
              - title
              - content
            properties:
              title:
                type: string
              content:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "An article"
                content:
                  type: string
                  example: "Some content"
      responses:
        200:
          description: Article updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "An article"
                  content:
                    type: string
                    example: "Some content"
                  user_id:
                    type: integer
                    example: 1
        400:
          description: Invalid input
        404:
          description: Article not found

    delete:
      tags:
        - Articles
      summary: Delete an article
      description: Delete an article by its ID.
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the article to delete
      responses:
        200:
          description: Article deleted successfully
        404:
          description: Article not found

  /api/v1/auth/login:
      post:
        tags:
          - Auth
        summary: User Login
        parameters:
          - in: body
            name: user
            description: User credentials.
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "User1"
                  password:
                    type: string
                    example: "superpassword"
        responses:
          200:
            description: Login success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: "User1"
                    password:
                      type: string
                      example: "superpassword"
          400:
            description: Username and password required
          404:
            description: User doesn't exist
          401:
            description: Bad username or password

  /api/v1/auth/refresh:
      post:
        tags:
          - Auth
        summary: Refresh token
        parameters:
          - in: header
            name: Authorization
            description: User refresh token.
            schema:
              type: object
              required:
                - Authorization
              properties:
                Authorization:
                  type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh_token:
                    type: string
        responses:
          200:
            description: Refresh token success
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    refresh_token:
                      type: string

  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get a list of all users
      description: Retrieve all users from the database.
      security:
        - JWT: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: "user"
                    role:
                      type: string
                      example: "user"

    post:
      tags:
        - Users
      summary: Create a new user
      description: Add a new user to the database.
      security:
        - JWT: []
      parameters:
        - in: body
          name: user
          description: User to create.
          schema:
            type: object
            required:
              - title
              - content
            properties:
              username:
                type: string
              password:
                type: string
              role:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user"
                role:
                  type: string
                  example: "user"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "user"
                  role:
                    type: string
                    example: "user"
        400:
          description: Invalid input

  /api/v1/users/search?q={data}:
    get:
      tags:
        - Users
      summary: Find users by their username
      description: Retrieve list of a users
      security:
        - JWT: []
      parameters:
        - in: path
          name: data
          required: true
          schema:
            type: string
          description: Text to find by
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "user"
                  role:
                    type: string
                    example: "user"

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get details of a specific user
      description: Retrieve details of a user by its ID.
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "user"
                  role:
                    type: string
                    example: "user"
        404:
          description: User not found

    put:
      tags:
        - Users
      summary: Update a user
      description: Update details of a user by its ID.
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to update
        - in: body
          name: user
          description: User to update.
          schema:
            type: object
            required:
              - username
              - password
              - role
            properties:
              username:
                type: string
              role:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user"
                role:
                  type: string
                  example: "user"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "user"
                  role:
                    type: string
                    example: "user"
        400:
          description: Invalid input
        404:
          description: User not found

    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete a user by its ID.
      security:
        - JWT: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found